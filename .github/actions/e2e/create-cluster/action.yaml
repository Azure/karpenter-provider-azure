name: CreateCluster
description: 'Installs Go Downloads and installs Karpenter Dependencies'
inputs:
#   k8s_version:
#     description: 'Version of Kubernetes to use for the launched cluster'
#     required: false
#     default: "1.27"
  client-id:
    description: 
    required: true
  tenant-id:
    description: 
    required: true
  subscription-id:
    description: 
    required: true
  resource_group:
    description: "Name of the resource group to create the cluster within"
    required: true
  cluster_name:
    description: 'Name of the cluster to be created'
    required: true
  acr_name:
    description: "Name of the acr holding the karpenter image"
    required: true
  git_ref:
    description: "The git commit, tag, or branch to check out"
    required: false
  location:
    description: "The azure location to run the e2e test in"
    default: "eastus"
  network_configuration:
    description: 'Type of network configuration to use'
    required: true
    default: 'azurecniv1'
runs:
  using: "composite"
  steps:
  - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
    with:
      ref: ${{ inputs.git_ref }}
  - name: az login
    uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
    with:
      client-id: ${{ inputs.client-id }}
      tenant-id: ${{ inputs.tenant-id }}
      subscription-id: ${{ inputs.subscription-id }}
  - name: az set sub
    shell: bash
    run: az account set --subscription ${{ inputs.subscription-id }}
  - name: create workload msi
    shell: bash
    run: AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_LOCATION=${{ inputs.location }} make az-create-workload-msi
  - name: create cluster
    shell: bash
    run: |
      if [ "${{ inputs.network_configuration }}" == "azurecni-overlay" ]; then
        AZURE_CLUSTER_NAME=${{ inputs.cluster_name }} AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_ACR_NAME=${{ inputs.acr_name }} AZURE_LOCATION=${{ inputs.location }} make az-mkaks-overlay
      elif [ "${{ inputs.network_configuration }}" == "azcni-overlay-cilium" ]; then
        AZURE_CLUSTER_NAME=${{ inputs.cluster_name }} AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_ACR_NAME=${{ inputs.acr_name }} AZURE_LOCATION=${{ inputs.location }} make az-mkaks-cilium
      elif [ "${{ inputs.network_configuration }} == "azurecniv1"]; then
        AZURE_CLUSTER_NAME=${{ inputs.cluster_name }} AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_ACR_NAME=${{ inputs.acr_name }} AZURE_LOCATION=${{ inputs.location }} make az-mkaks-cniv1
      else
        AZURE_CLUSTER_NAME=${{ inputs.cluster_name }} AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_ACR_NAME=${{ inputs.acr_name }} AZURE_LOCATION=${{ inputs.location }} make az-mkaks-cilium
      fi
  - name: az login 2
    uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
    with:
      client-id: ${{ inputs.client-id }}
      tenant-id: ${{ inputs.tenant-id }}
      subscription-id: ${{ inputs.subscription-id }}
  - name: create federated cred
    shell: bash
    run: AZURE_CLUSTER_NAME=${{ inputs.cluster_name }} AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} make az-create-federated-cred
  - name: update azure perms
    shell: bash
    run: |
      AZURE_CLUSTER_NAME=${{ inputs.cluster_name }} AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_LOCATION=${{ inputs.location }} make az-perm
      AZURE_RESOURCE_GROUP=${{ inputs.resource_group }} AZURE_ACR_NAME=${{ inputs.acr_name }} make az-perm-acr
