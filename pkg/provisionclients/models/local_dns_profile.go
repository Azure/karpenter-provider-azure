/*
Portions Copyright (c) Microsoft Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalDNSProfile Configures the per-node local DNS, with VnetDNS and KubeDNS overrides. LocalDNS helps improve performance and reliability of DNS resolution in an AKS cluster. For more details see aka.ms/aks/localdns.
//
// swagger:model LocalDNSProfile
type LocalDNSProfile struct {

	// KubeDNS overrides apply to DNS traffic from pods with dnsPolicy:ClusterFirst (referred to as KubeDNS traffic).
	KubeDNSOverrides LocalDNSOverrides `json:"kubeDNSOverrides,omitempty"`

	// Mode of enablement for localDNS.
	// Enum: ["Preferred","Required","Disabled"]
	Mode *string `json:"mode,omitempty"`

	// VnetDNS overrides apply to DNS traffic from pods with dnsPolicy:default or kubelet (referred to as VnetDNS traffic).
	VnetDNSOverrides LocalDNSOverrides `json:"vnetDNSOverrides,omitempty"`
}

// Validate validates this local DNS profile
func (m *LocalDNSProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubeDNSOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnetDNSOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalDNSProfile) validateKubeDNSOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.KubeDNSOverrides) { // not required
		return nil
	}

	if m.KubeDNSOverrides != nil {
		if err := m.KubeDNSOverrides.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubeDNSOverrides")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubeDNSOverrides")
			}
			return err
		}
	}

	return nil
}

var localDnsProfileTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Preferred","Required","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localDnsProfileTypeModePropEnum = append(localDnsProfileTypeModePropEnum, v)
	}
}

const (

	// LocalDNSProfileModePreferred captures enum value "Preferred"
	LocalDNSProfileModePreferred string = "Preferred"

	// LocalDNSProfileModeRequired captures enum value "Required"
	LocalDNSProfileModeRequired string = "Required"

	// LocalDNSProfileModeDisabled captures enum value "Disabled"
	LocalDNSProfileModeDisabled string = "Disabled"
)

// prop value enum
func (m *LocalDNSProfile) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, localDnsProfileTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocalDNSProfile) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *LocalDNSProfile) validateVnetDNSOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.VnetDNSOverrides) { // not required
		return nil
	}

	if m.VnetDNSOverrides != nil {
		if err := m.VnetDNSOverrides.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnetDNSOverrides")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnetDNSOverrides")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this local DNS profile based on the context it is used
func (m *LocalDNSProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubeDNSOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVnetDNSOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalDNSProfile) contextValidateKubeDNSOverrides(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.KubeDNSOverrides) { // not required
		return nil
	}

	if err := m.KubeDNSOverrides.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("kubeDNSOverrides")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("kubeDNSOverrides")
		}
		return err
	}

	return nil
}

func (m *LocalDNSProfile) contextValidateVnetDNSOverrides(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.VnetDNSOverrides) { // not required
		return nil
	}

	if err := m.VnetDNSOverrides.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vnetDNSOverrides")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vnetDNSOverrides")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocalDNSProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalDNSProfile) UnmarshalBinary(b []byte) error {
	var res LocalDNSProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
