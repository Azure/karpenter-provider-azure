/*
Portions Copyright (c) Microsoft Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomLinuxOSConfig custom linux o s config
//
// swagger:model CustomLinuxOSConfig
type CustomLinuxOSConfig struct {

	// swap file size m b
	SwapFileSizeMB *int32 `json:"swapFileSizeMB,omitempty"`

	// sysctls
	Sysctls *SysctlConfig `json:"sysctls,omitempty"`

	// transparent huge page defrag
	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty"`

	// transparent huge page enabled
	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty"`

	// ulimits
	Ulimits *UlimitConfig `json:"ulimits,omitempty"`
}

// Validate validates this custom linux o s config
func (m *CustomLinuxOSConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSysctls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUlimits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomLinuxOSConfig) validateSysctls(formats strfmt.Registry) error {
	if swag.IsZero(m.Sysctls) { // not required
		return nil
	}

	if m.Sysctls != nil {
		if err := m.Sysctls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysctls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysctls")
			}
			return err
		}
	}

	return nil
}

func (m *CustomLinuxOSConfig) validateUlimits(formats strfmt.Registry) error {
	if swag.IsZero(m.Ulimits) { // not required
		return nil
	}

	if m.Ulimits != nil {
		if err := m.Ulimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ulimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ulimits")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this custom linux o s config based on the context it is used
func (m *CustomLinuxOSConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSysctls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUlimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomLinuxOSConfig) contextValidateSysctls(ctx context.Context, formats strfmt.Registry) error {

	if m.Sysctls != nil {

		if swag.IsZero(m.Sysctls) { // not required
			return nil
		}

		if err := m.Sysctls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sysctls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sysctls")
			}
			return err
		}
	}

	return nil
}

func (m *CustomLinuxOSConfig) contextValidateUlimits(ctx context.Context, formats strfmt.Registry) error {

	if m.Ulimits != nil {

		if swag.IsZero(m.Ulimits) { // not required
			return nil
		}

		if err := m.Ulimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ulimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ulimits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomLinuxOSConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomLinuxOSConfig) UnmarshalBinary(b []byte) error {
	var res CustomLinuxOSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
