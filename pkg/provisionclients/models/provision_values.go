/*
Portions Copyright (c) Microsoft Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvisionValues provision values
//
// swagger:model ProvisionValues
type ProvisionValues struct {

	// provision helper values
	// Required: true
	ProvisionHelperValues *ProvisionHelperValues `json:"provisionHelperValues"`

	// provision profile
	// Required: true
	ProvisionProfile *ProvisionProfile `json:"provisionProfile"`
}

// Validate validates this provision values
func (m *ProvisionValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvisionHelperValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisionProfile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvisionValues) validateProvisionHelperValues(formats strfmt.Registry) error {

	if err := validate.Required("provisionHelperValues", "body", m.ProvisionHelperValues); err != nil {
		return err
	}

	if m.ProvisionHelperValues != nil {
		if err := m.ProvisionHelperValues.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provisionHelperValues")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provisionHelperValues")
			}

			return err
		}
	}

	return nil
}

func (m *ProvisionValues) validateProvisionProfile(formats strfmt.Registry) error {

	if err := validate.Required("provisionProfile", "body", m.ProvisionProfile); err != nil {
		return err
	}

	if m.ProvisionProfile != nil {
		if err := m.ProvisionProfile.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provisionProfile")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provisionProfile")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this provision values based on the context it is used
func (m *ProvisionValues) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvisionHelperValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisionProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvisionValues) contextValidateProvisionHelperValues(ctx context.Context, formats strfmt.Registry) error {

	if m.ProvisionHelperValues != nil {

		if err := m.ProvisionHelperValues.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provisionHelperValues")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provisionHelperValues")
			}

			return err
		}
	}

	return nil
}

func (m *ProvisionValues) contextValidateProvisionProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.ProvisionProfile != nil {

		if err := m.ProvisionProfile.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provisionProfile")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provisionProfile")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvisionValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvisionValues) UnmarshalBinary(b []byte) error {
	var res ProvisionValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
